var __hasProp = Object.prototype.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

module.exports = function(BasePlugin) {
  var AxisPlugin;
  return AxisPlugin = (function(_super) {

    __extends(AxisPlugin, _super);

    function AxisPlugin() {
      AxisPlugin.__super__.constructor.apply(this, arguments);
    }

    AxisPlugin.prototype.name = 'axis';

    AxisPlugin.prototype.config = {
      useAxis: true,
      compress: true,
      environments: {
        development: {
          compress: false
        }
      }
    };

    AxisPlugin.prototype.render = function(opts, next) {
      var axis, content, file, inExtension, outExtension, style, stylus;
      inExtension = opts.inExtension, outExtension = opts.outExtension, content = opts.content, file = opts.file;
      if ((inExtension === 'styl' || inExtension === 'stylus') && (outExtension === 'css' || outExtension === null)) {
        stylus = require('stylus');
        style = stylus(opts.content).set('filename', file.get('fullPath')).set('compress', this.config.compress);
        if (this.config.useAxis) {
          axis = require('axis-css');
          style.use(axis());
        }
        return style.render(function(err, output) {
          if (err) return next(err);
          opts.content = output;
          return next();
        });
      } else {
        return next();
      }
    };

    return AxisPlugin;

  })(BasePlugin);
};
