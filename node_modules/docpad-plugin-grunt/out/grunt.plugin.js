// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var GruntPlugin;
    return GruntPlugin = (function(_super) {
      __extends(GruntPlugin, _super);

      GruntPlugin.prototype.name = 'grunt';

      GruntPlugin.prototype.config = {
        gruntTasks: []
      };

      function GruntPlugin() {
        GruntPlugin.__super__.constructor.apply(this, arguments);
        this.safeps = require('safeps');
        this.path = require('path');
        this.glob = require('glob');
        this;
      }

      GruntPlugin.prototype.writeAfter = function(opts, next) {
        var command, config, err, files, gruntPath, rootPath, task, _i, _len, _ref;
        config = this.getConfig();
        rootPath = this.docpad.getConfig().rootPath;
        files = this.glob.sync('**/grunt-cli/bin/grunt', {
          cwd: rootPath,
          nosort: true
        });
        if (gruntPath = files[0] || false) {
          command = [this.path.join(rootPath, gruntPath)];
          _ref = config.gruntTasks || [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            task = _ref[_i];
            command.push(task);
          }
          this.safeps.spawn(command, {
            cwd: rootPath,
            output: true
          }, next);
        } else {
          err = new Error('Could not find the Grunt command line interface.');
          return next(err);
          err;
        }
        return this;
      };

      return GruntPlugin;

    })(BasePlugin);
  };

}).call(this);
